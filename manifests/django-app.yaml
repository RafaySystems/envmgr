apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: db
  name: db
spec:
  replicas: 1
  selector:
    matchLabels:
      service: db
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        service: db
    spec:
      containers:
        - env:
            - name: POSTGRES_DB
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_USER
              value: postgres
          image: postgres:13.0-alpine
          name: db
          ports:
            - containerPort: 5432
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-data
      restartPolicy: Always
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: db
  name: db
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  selector:
    service: db
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: postgres-data
  name: postgres-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: docker-compose-django-celery-redis-postgres-default
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              io.kompose.network/docker-compose-django-celery-redis-postgres-default: "true"
  podSelector:
    matchLabels:
      io.kompose.network/docker-compose-django-celery-redis-postgres-default: "true"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: nginx
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      service: nginx
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        service: nginx
    spec:
      containers:
        - image: nginx:1.23-alpine
          name: nginx
          ports:
            - containerPort: 80
          resources: {}
          volumeMounts:
            - mountPath: /etc/nginx/conf.d
              name: nginx-config
            - mountPath: /app/backend/django_static
              name: static-volume
      restartPolicy: Always
      volumes:
        - configMap:
            name: nginx-config
            items:
              - key: nginx.conf
                path: default.conf
          name: nginx-config
        - name: static-volume
          persistentVolumeClaim:
            claimName: static-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: nginx
  name: nginx
spec:
  ports:
    - name: "80"
      port: 80
      targetPort: 80
  selector:
    service: nginx
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: default
data:
  nginx.conf: |
    server {
        listen 80;
        server_name _;
        server_tokens off;

        client_max_body_size 20M;

        location / {
            try_files $uri @proxy_api;
        }

        location /admin {
            try_files $uri @proxy_api;
        }

        location @proxy_api {
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_pass   http://server:8000;
        }

        location /django_static/ {
            autoindex on;
            alias /app/backend/django_static/;
        }

    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      service: redis
  strategy: {}
  template:
    metadata:
      labels:
        service: redis
    spec:
      containers:
        - image: redis:7.0.5-alpine
          name: redis
          ports:
            - containerPort: 6379
          resources: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: redis
  name: redis
spec:
  ports:
    - name: "6379"
      port: 6379
      targetPort: 6379
  selector:
    service: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: server
  name: server
spec:
  replicas: 1
  selector:
    matchLabels:
      service: server
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        service: server
    spec:
      containers:
        - command:
            - /app/docker/backend/server-entrypoint.sh
          env:
            - name: CELERY_BROKER_URL
              value: redis://redis:6379/0
            - name: CELERY_RESULT_BACKEND
              value: redis://redis:6379/0
            - name: DEBUG
              value: "True"
            - name: DJANGO_DB
              value: postgresql
            - name: POSTGRES_HOST
              value: db
            - name: POSTGRES_NAME
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_USER
              value: postgres
          image: akash3/django-server:1.0
          name: server
          ports:
            - containerPort: 8000
          resources: {}
          volumeMounts:
            - mountPath: /app/backend/django_static
              name: static-volume
      restartPolicy: Always
      volumes:
        - name: static-volume
          persistentVolumeClaim:
            claimName: static-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: server
  name: server
spec:
  ports:
    - name: "8000"
      port: 8000
      targetPort: 8000
  selector:
    service: server
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: static-volume
  name: static-volume
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: worker
  name: worker
spec:
  replicas: 1
  selector:
    matchLabels:
      service: worker
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        service: worker
    spec:
      containers:
        - command:
            - /app/docker/backend/worker-entrypoint.sh
          env:
            - name: CELERY_BROKER_URL
              value: redis://redis:6379/0
            - name: CELERY_RESULT_BACKEND
              value: redis://redis:6379/0
            - name: DEBUG
              value: "True"
            - name: DJANGO_DB
              value: postgresql
            - name: POSTGRES_HOST
              value: db
            - name: POSTGRES_NAME
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_USER
              value: postgres
          image: akash3/django-worker:1.0
          name: worker
          resources: {}
          volumeMounts:
            - mountPath: /app/backend/django_static
              name: static-volume
      restartPolicy: Always
      volumes:
        - name: static-volume
          persistentVolumeClaim:
            claimName: static-volume
